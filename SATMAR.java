import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.awt.geom.AffineTransform;
import java.awt.geom.NoninvertibleTransformException;
import java.awt.geom.Point2D;
import java.awt.image.BufferedImage;
import java.io.FileInputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;
//import java.lang.*;

/*The MIT License (MIT)
Copyright © 2022 Alexander Joseph Kostyak

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), 
to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, 
sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.*/


// IMPORTANT WARNING
// Not to be relied upon in life or death situations or environments where failure could lead to death or bodily injury


public class SATMAR extends JPanel {


	private static final long serialVersionUID = -5732957528215565983L;
	
	static BufferedImage img;
	static Graphics2D buffer;
	static BufferedImage imagememorybuffer[][];
	static GebcoShort gebcomemorybuffer[][];

	static boolean updatefields = false;
	static int topindex = 0;
	static int leftindex = 0;

	static JFrame frame = new JFrame("SAT MAR DAT");
	static JButton TOPOButton = new JButton("");
	static String datasetstring = "GOOGSAT";
	static String unitsstring = "";
	static int configinput = 1;
	static int tileheight = 14;
	static int tilewidth = 18;
	static double buffercoorboundary[] = {0,0,0,0}; //top bottom left right

	//Data Tile Formatting hard-coded
	private static double longitudematrix[] = {-180,-179.6484375,-179.296875,-178.9453125,-178.59375,-178.2421875,-177.890625,-177.5390625,-177.1875,-176.8359375,-176.484375,-176.1328125,-175.78125,-175.4296875,-175.078125,-174.7265625,-174.375,-174.0234375,-173.671875,-173.3203125,-172.96875,-172.6171875,-172.265625,-171.9140625,-171.5625,-171.2109375,-170.859375,-170.5078125,-170.15625,-169.8046875,-169.453125,-169.1015625,-168.75,-168.3984375,-168.046875,-167.6953125,-167.34375,-166.9921875,-166.640625,-166.2890625,-165.9375,-165.5859375,-165.234375,-164.8828125,-164.53125,-164.1796875,-163.828125,-163.4765625,-163.125,-162.7734375,-162.421875,-162.0703125,-161.71875,-161.3671875,-161.015625,-160.6640625,-160.3125,-159.9609375,-159.609375,-159.2578125,-158.90625,-158.5546875,-158.203125,-157.8515625,-157.5,-157.1484375,-156.796875,-156.4453125,-156.09375,-155.7421875,-155.390625,-155.0390625,-154.6875,-154.3359375,-153.984375,-153.6328125,-153.28125,-152.9296875,-152.578125,-152.2265625,-151.875,-151.5234375,-151.171875,-150.8203125,-150.46875,-150.1171875,-149.765625,-149.4140625,-149.0625,-148.7109375,-148.359375,-148.0078125,-147.65625,-147.3046875,-146.953125,-146.6015625,-146.25,-145.8984375,-145.546875,-145.1953125,-144.84375,-144.4921875,-144.140625,-143.7890625,-143.4375,-143.0859375,-142.734375,-142.3828125,-142.03125,-141.6796875,-141.328125,-140.9765625,-140.625,-140.2734375,-139.921875,-139.5703125,-139.21875,-138.8671875,-138.515625,-138.1640625,-137.8125,-137.4609375,-137.109375,-136.7578125,-136.40625,-136.0546875,-135.703125,-135.3515625,-135,-134.6484375,-134.296875,-133.9453125,-133.59375,-133.2421875,-132.890625,-132.5390625,-132.1875,-131.8359375,-131.484375,-131.1328125,-130.78125,-130.4296875,-130.078125,-129.7265625,-129.375,-129.0234375,-128.671875,-128.3203125,-127.96875,-127.6171875,-127.265625,-126.9140625,-126.5625,-126.2109375,-125.859375,-125.5078125,-125.15625,-124.8046875,-124.453125,-124.1015625,-123.75,-123.3984375,-123.046875,-122.6953125,-122.34375,-121.9921875,-121.640625,-121.2890625,-120.9375,-120.5859375,-120.234375,-119.8828125,-119.53125,-119.1796875,-118.828125,-118.4765625,-118.125,-117.7734375,-117.421875,-117.0703125,-116.71875,-116.3671875,-116.015625,-115.6640625,-115.3125,-114.9609375,-114.609375,-114.2578125,-113.90625,-113.5546875,-113.203125,-112.8515625,-112.5,-112.1484375,-111.796875,-111.4453125,-111.09375,-110.7421875,-110.390625,-110.0390625,-109.6875,-109.3359375,-108.984375,-108.6328125,-108.28125,-107.9296875,-107.578125,-107.2265625,-106.875,-106.5234375,-106.171875,-105.8203125,-105.46875,-105.1171875,-104.765625,-104.4140625,-104.0625,-103.7109375,-103.359375,-103.0078125,-102.65625,-102.3046875,-101.953125,-101.6015625,-101.25,-100.8984375,-100.546875,-100.1953125,-99.84375,-99.4921875,-99.140625,-98.7890625,-98.4375,-98.0859375,-97.734375,-97.3828125,-97.03125,-96.6796875,-96.328125,-95.9765625,-95.625,-95.2734375,-94.921875,-94.5703125,-94.21875,-93.8671875,-93.515625,-93.1640625,-92.8125,-92.4609375,-92.109375,-91.7578125,-91.40625,-91.0546875,-90.703125,-90.3515625,-90,-89.6484375,-89.296875,-88.9453125,-88.59375,-88.2421875,-87.890625,-87.5390625,-87.1875,-86.8359375,-86.484375,-86.1328125,-85.78125,-85.4296875,-85.078125,-84.7265625,-84.375,-84.0234375,-83.671875,-83.3203125,-82.96875,-82.6171875,-82.265625,-81.9140625,-81.5625,-81.2109375,-80.859375,-80.5078125,-80.15625,-79.8046875,-79.453125,-79.1015625,-78.75,-78.3984375,-78.046875,-77.6953125,-77.34375,-76.9921875,-76.640625,-76.2890625,-75.9375,-75.5859375,-75.234375,-74.8828125,-74.53125,-74.1796875,-73.828125,-73.4765625,-73.125,-72.7734375,-72.421875,-72.0703125,-71.71875,-71.3671875,-71.015625,-70.6640625,-70.3125,-69.9609375,-69.609375,-69.2578125,-68.90625,-68.5546875,-68.203125,-67.8515625,-67.5,-67.1484375,-66.796875,-66.4453125,-66.09375,-65.7421875,-65.390625,-65.0390625,-64.6875,-64.3359375,-63.984375,-63.6328125,-63.28125,-62.9296875,-62.578125,-62.2265625,-61.875,-61.5234375,-61.171875,-60.8203125,-60.46875,-60.1171875,-59.765625,-59.4140625,-59.0625,-58.7109375,-58.359375,-58.0078125,-57.65625,-57.3046875,-56.953125,-56.6015625,-56.25,-55.8984375,-55.546875,-55.1953125,-54.84375,-54.4921875,-54.140625,-53.7890625,-53.4375,-53.0859375,-52.734375,-52.3828125,-52.03125,-51.6796875,-51.328125,-50.9765625,-50.625,-50.2734375,-49.921875,-49.5703125,-49.21875,-48.8671875,-48.515625,-48.1640625,-47.8125,-47.4609375,-47.109375,-46.7578125,-46.40625,-46.0546875,-45.703125,-45.3515625,-45,-44.6484375,-44.296875,-43.9453125,-43.59375,-43.2421875,-42.890625,-42.5390625,-42.1875,-41.8359375,-41.484375,-41.1328125,-40.78125,-40.4296875,-40.078125,-39.7265625,-39.375,-39.0234375,-38.671875,-38.3203125,-37.96875,-37.6171875,-37.265625,-36.9140625,-36.5625,-36.2109375,-35.859375,-35.5078125,-35.15625,-34.8046875,-34.453125,-34.1015625,-33.75,-33.3984375,-33.046875,-32.6953125,-32.34375,-31.9921875,-31.640625,-31.2890625,-30.9375,-30.5859375,-30.234375,-29.8828125,-29.53125,-29.1796875,-28.828125,-28.4765625,-28.125,-27.7734375,-27.421875,-27.0703125,-26.71875,-26.3671875,-26.015625,-25.6640625,-25.3125,-24.9609375,-24.609375,-24.2578125,-23.90625,-23.5546875,-23.203125,-22.8515625,-22.5,-22.1484375,-21.796875,-21.4453125,-21.09375,-20.7421875,-20.390625,-20.0390625,-19.6875,-19.3359375,-18.984375,-18.6328125,-18.28125,-17.9296875,-17.578125,-17.2265625,-16.875,-16.5234375,-16.171875,-15.8203125,-15.46875,-15.1171875,-14.765625,-14.4140625,-14.0625,-13.7109375,-13.359375,-13.0078125,-12.65625,-12.3046875,-11.953125,-11.6015625,-11.25,-10.8984375,-10.546875,-10.1953125,-9.84375,-9.4921875,-9.140625,-8.7890625,-8.4375,-8.0859375,-7.734375,-7.3828125,-7.03125,-6.6796875,-6.328125,-5.9765625,-5.625,-5.2734375,-4.921875,-4.5703125,-4.21875,-3.8671875,-3.515625,-3.1640625,-2.8125,-2.4609375,-2.109375,-1.7578125,-1.40625,-1.0546875,-0.703125,-0.3515625,0,0.3515625,0.703125,1.0546875,1.40625,1.7578125,2.109375,2.4609375,2.8125,3.1640625,3.515625,3.8671875,4.21875,4.5703125,4.921875,5.2734375,5.625,5.9765625,6.328125,6.6796875,7.03125,7.3828125,7.734375,8.0859375,8.4375,8.7890625,9.140625,9.4921875,9.84375,10.1953125,10.546875,10.8984375,11.25,11.6015625,11.953125,12.3046875,12.65625,13.0078125,13.359375,13.7109375,14.0625,14.4140625,14.765625,15.1171875,15.46875,15.8203125,16.171875,16.5234375,16.875,17.2265625,17.578125,17.9296875,18.28125,18.6328125,18.984375,19.3359375,19.6875,20.0390625,20.390625,20.7421875,21.09375,21.4453125,21.796875,22.1484375,22.5,22.8515625,23.203125,23.5546875,23.90625,24.2578125,24.609375,24.9609375,25.3125,25.6640625,26.015625,26.3671875,26.71875,27.0703125,27.421875,27.7734375,28.125,28.4765625,28.828125,29.1796875,29.53125,29.8828125,30.234375,30.5859375,30.9375,31.2890625,31.640625,31.9921875,32.34375,32.6953125,33.046875,33.3984375,33.75,34.1015625,34.453125,34.8046875,35.15625,35.5078125,35.859375,36.2109375,36.5625,36.9140625,37.265625,37.6171875,37.96875,38.3203125,38.671875,39.0234375,39.375,39.7265625,40.078125,40.4296875,40.78125,41.1328125,41.484375,41.8359375,42.1875,42.5390625,42.890625,43.2421875,43.59375,43.9453125,44.296875,44.6484375,45,45.3515625,45.703125,46.0546875,46.40625,46.7578125,47.109375,47.4609375,47.8125,48.1640625,48.515625,48.8671875,49.21875,49.5703125,49.921875,50.2734375,50.625,50.9765625,51.328125,51.6796875,52.03125,52.3828125,52.734375,53.0859375,53.4375,53.7890625,54.140625,54.4921875,54.84375,55.1953125,55.546875,55.8984375,56.25,56.6015625,56.953125,57.3046875,57.65625,58.0078125,58.359375,58.7109375,59.0625,59.4140625,59.765625,60.1171875,60.46875,60.8203125,61.171875,61.5234375,61.875,62.2265625,62.578125,62.9296875,63.28125,63.6328125,63.984375,64.3359375,64.6875,65.0390625,65.390625,65.7421875,66.09375,66.4453125,66.796875,67.1484375,67.5,67.8515625,68.203125,68.5546875,68.90625,69.2578125,69.609375,69.9609375,70.3125,70.6640625,71.015625,71.3671875,71.71875,72.0703125,72.421875,72.7734375,73.125,73.4765625,73.828125,74.1796875,74.53125,74.8828125,75.234375,75.5859375,75.9375,76.2890625,76.640625,76.9921875,77.34375,77.6953125,78.046875,78.3984375,78.75,79.1015625,79.453125,79.8046875,80.15625,80.5078125,80.859375,81.2109375,81.5625,81.9140625,82.265625,82.6171875,82.96875,83.3203125,83.671875,84.0234375,84.375,84.7265625,85.078125,85.4296875,85.78125,86.1328125,86.484375,86.8359375,87.1875,87.5390625,87.890625,88.2421875,88.59375,88.9453125,89.296875,89.6484375,90,90.3515625,90.703125,91.0546875,91.40625,91.7578125,92.109375,92.4609375,92.8125,93.1640625,93.515625,93.8671875,94.21875,94.5703125,94.921875,95.2734375,95.625,95.9765625,96.328125,96.6796875,97.03125,97.3828125,97.734375,98.0859375,98.4375,98.7890625,99.140625,99.4921875,99.84375,100.1953125,100.546875,100.8984375,101.25,101.6015625,101.953125,102.3046875,102.65625,103.0078125,103.359375,103.7109375,104.0625,104.4140625,104.765625,105.1171875,105.46875,105.8203125,106.171875,106.5234375,106.875,107.2265625,107.578125,107.9296875,108.28125,108.6328125,108.984375,109.3359375,109.6875,110.0390625,110.390625,110.7421875,111.09375,111.4453125,111.796875,112.1484375,112.5,112.8515625,113.203125,113.5546875,113.90625,114.2578125,114.609375,114.9609375,115.3125,115.6640625,116.015625,116.3671875,116.71875,117.0703125,117.421875,117.7734375,118.125,118.4765625,118.828125,119.1796875,119.53125,119.8828125,120.234375,120.5859375,120.9375,121.2890625,121.640625,121.9921875,122.34375,122.6953125,123.046875,123.3984375,123.75,124.1015625,124.453125,124.8046875,125.15625,125.5078125,125.859375,126.2109375,126.5625,126.9140625,127.265625,127.6171875,127.96875,128.3203125,128.671875,129.0234375,129.375,129.7265625,130.078125,130.4296875,130.78125,131.1328125,131.484375,131.8359375,132.1875,132.5390625,132.890625,133.2421875,133.59375,133.9453125,134.296875,134.6484375,135,135.3515625,135.703125,136.0546875,136.40625,136.7578125,137.109375,137.4609375,137.8125,138.1640625,138.515625,138.8671875,139.21875,139.5703125,139.921875,140.2734375,140.625,140.9765625,141.328125,141.6796875,142.03125,142.3828125,142.734375,143.0859375,143.4375,143.7890625,144.140625,144.4921875,144.84375,145.1953125,145.546875,145.8984375,146.25,146.6015625,146.953125,147.3046875,147.65625,148.0078125,148.359375,148.7109375,149.0625,149.4140625,149.765625,150.1171875,150.46875,150.8203125,151.171875,151.5234375,151.875,152.2265625,152.578125,152.9296875,153.28125,153.6328125,153.984375,154.3359375,154.6875,155.0390625,155.390625,155.7421875,156.09375,156.4453125,156.796875,157.1484375,157.5,157.8515625,158.203125,158.5546875,158.90625,159.2578125,159.609375,159.9609375,160.3125,160.6640625,161.015625,161.3671875,161.71875,162.0703125,162.421875,162.7734375,163.125,163.4765625,163.828125,164.1796875,164.53125,164.8828125,165.234375,165.5859375,165.9375,166.2890625,166.640625,166.9921875,167.34375,167.6953125,168.046875,168.3984375,168.75,169.1015625,169.453125,169.8046875,170.15625,170.5078125,170.859375,171.2109375,171.5625,171.9140625,172.265625,172.6171875,172.96875,173.3203125,173.671875,174.0234375,174.375,174.7265625,175.078125,175.4296875,175.78125,176.1328125,176.484375,176.8359375,177.1875,177.5390625,177.890625,178.2421875,178.59375,178.9453125,179.296875,179.6484375,180};
	private static double lattitudematrix[] = {85.0207077415414,84.9901001786437,84.9593049546405,84.9283209278953,84.8971469499916,84.8657818656975,84.834224512927,84.8024737227034,84.7705283191212,84.7383871193088,84.70604893339,84.673512564447,84.640776808481,84.6078404543747,84.5747022838539,84.5413610714484,84.5078155844537,84.4740645828921,84.4401068194734,84.4059410395563,84.3715659811088,84.3369803746687,84.3021829433044,84.2671724025751,84.2319474604913,84.1965068174741,84.1608491663161,84.124973192141,84.0888775723628,84.0525609766461,84.0160220668651,83.9792594970634,83.9422719134127,83.9050579541724,83.8676162496486,83.8299454221527,83.7920440859603,83.7539108472703,83.7155443041629,83.6769430465584,83.6381056561756,83.59903070649,83.559716762692,83.5201623816451,83.4803661118437,83.4403264933712,83.4000420578576,83.3595113284376,83.3187328197078,83.2777050376849,83.2364264797624,83.1948956346686,83.1531109824239,83.111070994298,83.0687741327669,83.0262188514705,82.9834035951692,82.9403267997017,82.8969868919409,82.8533822897518,82.8095114019481,82.7653726282489,82.7209643592356,82.6762849763088,82.6313328516448,82.5861063481528,82.540603819431,82.4948236097239,82.4487640538783,82.4024234773007,82.3558001959136,82.3088925161118,82.2616987347197,82.2142171389479,82.1664460063494,82.1183836047767,82.0700281923386,82.0213780173567,81.9724313183224,81.9231863238536,81.8736412526517,81.8237943134586,81.7736437050136,81.7231876160104,81.6724242250544,81.6213517006197,81.5699682010068,81.5182718742996,81.4662608583229,81.4139332806003,81.3612872583115,81.3083208982506,81.2550322967835,81.2014195398065,81.147480702704,81.0932138503073,81.038617036853,80.9836883059416,80.9284256904962,80.872827212722,80.8168908840653,80.7606147051727,80.7039966658511,80.6470347450273,80.5897269107083,80.5320711199414,80.4740653187748,80.4157074422187,80.356995414206,80.2979271475537,80.238500543925,80.1787134937907,80.1185638763916,80.0580495597013,79.997168400389,79.9359182437824,79.8742969238319,79.812302263074,79.7499320725962,79.6871841520011,79.6240562893722,79.5605462612391,79.4966518325432,79.4323707566049,79.36770077509,79.3026396179768,79.2371850035248,79.1713346382421,79.1050862168549,79.0384374222767,78.9713859255783,78.9039293859582,78.8360654507137,78.7677917552128,78.6991059228661,78.6300055651002,78.5604882813307,78.4905516589371,78.4201932732371,78.3494106874625,78.2782014527354,78.2065631080454,78.1344931802275,78.0619891839402,77.9890486216455,77.9156689835884,77.8418477477789,77.7675823799727,77.692870333655,77.6177090500235,77.5420959579733,77.4660284740822,77.3895040025972,77.3125199354224,77.2350736521067,77.157162519834,77.0787838934135,76.9999351152712,76.9206135154429,76.8408164115681,76.7605411088848,76.6797849002261,76.5985450660172,76.5168188742744,76.4346035806053,76.3518964282092,76.2686946478806,76.1849954580125,76.1007960646022,76.0160936612574,75.9308854292049,75.8451685373,75.7589401420375,75.6721973875646,75.5849374056951,75.4971573159248,75.4088542254495,75.3200252291841,75.2306674097829,75.1407778376626,75.0503535710264,74.9593916558903,74.8678891261109,74.7758430034152,74.6832502974327,74.5901080057285,74.4964131138395,74.402162595312,74.3073534117413,74.2119825128138,74.1160468363507,74.0195433083549,73.9224688430585,73.8248203429745,73.726594698949,73.6277887902172,73.5283994844609,73.4284236378687,73.3278580951989,73.2266996898446,73.1249452439017,73.0225915682392,72.9196354625725,72.816073715539,72.7119031047772,72.6071203970077,72.5017223481176,72.3957057032479,72.2890671968836,72.1818035529471,72.073911484894,71.9653876958132,71.8562288785289,71.7464317157068,71.6359928799632,71.5249090339771,71.4131768306064,71.3007929130071,71.1877539147561,71.0740564599774,70.9596971634724,70.8446726308532,70.7289794586804,70.6126142346038,70.495573537508,70.377853937661,70.2594519968674,70.1403642686249,70.0205872982861,69.9001176232232,69.7789517729977,69.6570862695343,69.5345176272985,69.41124235348,69.2872569481788,69.1625579045975,69.0371417092371,68.911004842098,68.7841437768856,68.6565549812207,68.5282349168549,68.3991800398908,68.2693868010075,68.1388516456906,68.0075710144679,67.8755413431504,67.742759063078,67.6092206013711,67.4749223811876,67.3398608219848,67.2040323397881,67.0674333474637,66.9300602549986,66.7919094697857,66.6529773969142,66.5132604394669,66.3727549988234,66.2314574749684,66.0893642668074,65.9464717724879,65.8027763897269,65.6582745161453,65.5129625496078,65.3668368885703,65.2198939324335,65.0721300819028,64.9235417393553,64.7741253092136,64.6238771983265,64.4727938163559,64.3208715761723,64.1681068942555,64.0144961911037,63.8600358916493,63.7047224256824,63.5485522282808,63.3915217402485,63.2336274085608,63.0748656868173,62.9152330357024,62.7547259234537,62.593340826338,62.4310742291345,62.2679226256272,62.1038825191036,61.9389504228625,61.7731228607297,61.6063963675809,61.4387674898739,61.2702327861883,61.1007888277734,60.9304321991046,60.7591594984481,60.5869673384339,60.4138523466373,60.2398111661686,60.0648404562715,59.8889368929304,59.7120971694851,59.5343179972555,59.3555961061741,59.1759282454271,58.9953111841048,58.8137417118599,58.6312166395752,58.4477328000398,58.2632870486336,58.0778762640215,57.8914973488555,57.7041472304862,57.5158228616822,57.3265212213598,57.1362393153196,56.9449741769933,56.7527228681988,56.5594824799035,56.3652501329974,56.1700229790735,55.9737982012183,55.7765730148099,55.5783446683248,55.379110444154,55.1788676594264,54.9776136668417,54.7753458555112,54.5720616518066,54.367758520218,54.1624339642191,53.956085527141,53.7487107930541,53.5403073876575,53.3308729791767,53.1204052792688,52.9089020439352,52.6963610744422,52.482780218249,52.2681573699422,52.0524904721784,51.8357775166334,51.6180165449584,51.3992056497424,51.179342975482,50.9584267195569,50.7364551332121,50.5134265225457,50.2893392495028,50.0641917328751,49.8379824493061,49.6107099343009,49.3823727832418,49.1529696524085,48.9224992600023,48.6909603871758,48.4583518790653,48.2246726458285,47.9899216636842,47.7540979759571,47.5172006941237,47.2792289988625,47.040182141106,46.8000594430945,46.5588602994324,46.3165841781457,46.0732306217403,45.8287992482619,45.5832897523558,45.3367019063267,45.089035561199,44.8402906477755,44.5904671776961,44.3395652444944,44.0875850246526,43.8345267786547,43.5803908520364,43.3251776764324,43.0688877706202,42.8115217415598,42.5530802854293,42.2935641886554,42.0329743289387,41.7713116762736,41.5085772939614,41.2447723396169,40.9798980661679,40.713955822847,40.4469470561749,40.178873310935,39.9097362311391,39.6395375609828,39.3682791457906,39.0959629329506,38.8225909728371,38.5481654197216,38.2726885326714,37.9961626764341,37.71859032231,37.4399740490085,37.160316543491,36.8796206017976,36.5978891298578,36.3151251442852,36.0313317731538,35.746512256758,35.4606699483526,35.1738083148749,34.8859309376468,34.5970415130563,34.307143853219,34.016241886617,33.7243396587168,33.431441332564,33.1375511893546,32.8426736289828,32.5468131705639,32.2499744529325,31.9521622351149,31.6533813967749,31.3536369386332,31.0529339828588,30.7512777734332,30.4486736764849,30.1451271805956,29.8406438970764,29.5352295602131,29.2288900274818,28.9216312797321,28.6134594213386,28.3043806803206,27.9944014084279,27.6835280811936,27.3717672979532,27.0591257818288,26.7456103796786,26.4312280620111,26.1159859228635,25.7998911796438,25.4829511729365,25.1651733662712,24.8465653458532,24.5271348202576,24.2068896200845,23.8858376975754,23.5639871261917,23.2413461001539,22.9179229339413,22.5937260617524,22.268764036925,21.9430455313174,21.6165793346482,21.2893743537966,20.9614396120618,20.632784248382,20.3034175165124,19.9733487841631,19.6425875320951,19.3111433531765,18.9790259513972,18.6462451408427,18.3128108446278,17.9787330937891,17.6440220261364,17.3086878850646,16.9727410183247,16.6361918767546,16.2990510129702,15.9613290800166,15.62303682998,15.2841851125601,14.9447848736041,14.6048471536019,14.264383086143,13.9234038963363,13.5819208991915,13.2399454979648,12.8974891824674,12.5545635273383,12.2111801902819,11.8673509102706,11.5230875057133,11.1784018725902,10.8333059825547,10.4878118810028,10.1419316851111,9.79567758184401,9.44906182592993,9.10209673780929,8.75479470155289,8.40716816275289,8.05922962638663,7.71099165465438,7.3624668647917,7.01366792685747,6.66460756149839,6.31529853769088,5.96575367046149,5.61598581858647,5.26600788227188,4.91583280081485,4.56547355024732,4.2149431409631,3.86425461532932,3.51342104528346,3.16245552991681,2.81137119304567,2.46018118077116,2.10889865902893,1.75753681112977,1.4061088352923,1.05462794216873,0.70310735236504,0.35156029395655,0,-0.35156029395655,-0.70310735236504,-1.05462794216873,-1.4061088352923,-1.75753681112978,-2.10889865902892,-2.46018118077116,-2.81137119304567,-3.16245552991681,-3.51342104528346,-3.86425461532932,-4.2149431409631,-4.56547355024733,-4.91583280081485,-5.26600788227188,-5.61598581858647,-5.96575367046149,-6.31529853769089,-6.66460756149839,-7.01366792685747,-7.3624668647917,-7.71099165465437,-8.05922962638662,-8.40716816275288,-8.75479470155289,-9.10209673780929,-9.44906182592993,-9.79567758184401,-10.1419316851111,-10.4878118810028,-10.8333059825547,-11.1784018725902,-11.5230875057133,-11.8673509102706,-12.2111801902819,-12.5545635273383,-12.8974891824674,-13.2399454979648,-13.5819208991915,-13.9234038963363,-14.264383086143,-14.6048471536019,-14.9447848736041,-15.2841851125601,-15.62303682998,-15.9613290800166,-16.2990510129702,-16.6361918767546,-16.9727410183247,-17.3086878850646,-17.6440220261364,-17.9787330937891,-18.3128108446279,-18.6462451408427,-18.9790259513972,-19.3111433531765,-19.6425875320951,-19.9733487841631,-20.3034175165124,-20.632784248382,-20.9614396120618,-21.2893743537966,-21.6165793346482,-21.9430455313174,-22.268764036925,-22.5937260617524,-22.9179229339413,-23.2413461001539,-23.5639871261917,-23.8858376975754,-24.2068896200845,-24.5271348202576,-24.8465653458532,-25.1651733662711,-25.4829511729365,-25.7998911796438,-26.1159859228635,-26.4312280620111,-26.7456103796786,-27.0591257818288,-27.3717672979532,-27.6835280811936,-27.9944014084279,-28.3043806803206,-28.6134594213386,-28.9216312797321,-29.2288900274818,-29.5352295602131,-29.8406438970764,-30.1451271805956,-30.4486736764849,-30.7512777734332,-31.0529339828588,-31.3536369386332,-31.6533813967749,-31.9521622351149,-32.2499744529325,-32.5468131705639,-32.8426736289828,-33.1375511893546,-33.431441332564,-33.7243396587168,-34.016241886617,-34.307143853219,-34.5970415130563,-34.8859309376468,-35.1738083148749,-35.4606699483526,-35.746512256758,-36.0313317731538,-36.3151251442852,-36.5978891298578,-36.8796206017976,-37.160316543491,-37.4399740490085,-37.71859032231,-37.9961626764341,-38.2726885326714,-38.5481654197216,-38.8225909728371,-39.0959629329506,-39.3682791457906,-39.6395375609828,-39.9097362311391,-40.178873310935,-40.4469470561749,-40.713955822847,-40.9798980661679,-41.2447723396169,-41.5085772939614,-41.7713116762736,-42.0329743289387,-42.2935641886554,-42.5530802854293,-42.8115217415598,-43.0688877706202,-43.3251776764324,-43.5803908520364,-43.8345267786547,-44.0875850246526,-44.3395652444944,-44.5904671776961,-44.8402906477755,-45.089035561199,-45.3367019063267,-45.5832897523558,-45.8287992482619,-46.0732306217403,-46.3165841781457,-46.5588602994324,-46.8000594430945,-47.040182141106,-47.2792289988625,-47.5172006941237,-47.7540979759571,-47.9899216636842,-48.2246726458285,-48.4583518790653,-48.6909603871758,-48.9224992600023,-49.1529696524085,-49.3823727832418,-49.6107099343009,-49.8379824493061,-50.0641917328751,-50.2893392495028,-50.5134265225457,-50.7364551332121,-50.9584267195569,-51.179342975482,-51.3992056497424,-51.6180165449584,-51.8357775166334,-52.0524904721784,-52.2681573699422,-52.482780218249,-52.6963610744422,-52.9089020439352,-53.1204052792688,-53.3308729791767,-53.5403073876575,-53.7487107930541,-53.956085527141,-54.1624339642191,-54.367758520218,-54.5720616518066,-54.7753458555112,-54.9776136668417,-55.1788676594264,-55.379110444154,-55.5783446683248,-55.7765730148099,-55.9737982012183,-56.1700229790735,-56.3652501329974,-56.5594824799035,-56.7527228681988,-56.9449741769933,-57.1362393153196,-57.3265212213598,-57.5158228616822,-57.7041472304862,-57.8914973488555,-58.0778762640215,-58.2632870486336,-58.4477328000398,-58.6312166395752,-58.8137417118599,-58.9953111841048,-59.1759282454271,-59.3555961061741,-59.5343179972555,-59.7120971694851,-59.8889368929304,-60.0648404562715,-60.2398111661686,-60.4138523466373,-60.5869673384339,-60.7591594984481,-60.9304321991046,-61.1007888277734,-61.2702327861883,-61.4387674898739,-61.6063963675809,-61.7731228607297,-61.9389504228625,-62.1038825191036,-62.2679226256272,-62.4310742291345,-62.593340826338,-62.7547259234537,-62.9152330357024,-63.0748656868173,-63.2336274085608,-63.3915217402485,-63.5485522282808,-63.7047224256824,-63.8600358916493,-64.0144961911037,-64.1681068942555,-64.3208715761723,-64.4727938163559,-64.6238771983265,-64.7741253092136,-64.9235417393553,-65.0721300819028,-65.2198939324335,-65.3668368885703,-65.5129625496078,-65.6582745161453,-65.8027763897269,-65.9464717724879,-66.0893642668074,-66.2314574749684,-66.3727549988234,-66.5132604394669,-66.6529773969142,-66.7919094697857,-66.9300602549986,-67.0674333474637,-67.2040323397881,-67.3398608219848,-67.4749223811876,-67.6092206013711,-67.742759063078,-67.8755413431504,-68.0075710144679,-68.1388516456906,-68.2693868010075,-68.3991800398908,-68.5282349168549,-68.6565549812207,-68.7841437768856,-68.911004842098,-69.0371417092371,-69.1625579045975,-69.2872569481788,-69.41124235348,-69.5345176272985,-69.6570862695343,-69.7789517729977,-69.9001176232232,-70.0205872982861,-70.1403642686249,-70.2594519968674,-70.377853937661,-70.495573537508,-70.6126142346038,-70.7289794586804,-70.8446726308532,-70.9596971634724,-71.0740564599775,-71.1877539147561,-71.3007929130071,-71.4131768306064,-71.5249090339771,-71.6359928799632,-71.7464317157068,-71.8562288785289,-71.9653876958132,-72.073911484894,-72.1818035529471,-72.2890671968836,-72.3957057032479,-72.5017223481176,-72.6071203970077,-72.7119031047772,-72.816073715539,-72.9196354625725,-73.0225915682392,-73.1249452439017,-73.2266996898446,-73.3278580951989,-73.4284236378687,-73.5283994844609,-73.6277887902172,-73.726594698949,-73.8248203429745,-73.9224688430585,-74.0195433083549,-74.1160468363507,-74.2119825128138,-74.3073534117413,-74.402162595312,-74.4964131138395,-74.5901080057285,-74.6832502974327,-74.7758430034152,-74.8678891261109,-74.9593916558903,-75.0503535710264,-75.1407778376626,-75.2306674097829,-75.3200252291841,-75.4088542254495,-75.4971573159248,-75.5849374056951,-75.6721973875646,-75.7589401420375,-75.8451685373,-75.9308854292049,-76.0160936612574,-76.1007960646022,-76.1849954580125,-76.2686946478806,-76.3518964282092,-76.4346035806053,-76.5168188742744,-76.5985450660172,-76.6797849002261,-76.7605411088848,-76.8408164115681,-76.9206135154429,-76.9999351152712,-77.0787838934135,-77.157162519834,-77.2350736521067,-77.3125199354224,-77.3895040025972,-77.4660284740822,-77.5420959579733,-77.6177090500235,-77.692870333655,-77.7675823799727,-77.8418477477789,-77.9156689835884,-77.9890486216455,-78.0619891839402,-78.1344931802275,-78.2065631080454,-78.2782014527354,-78.3494106874625,-78.4201932732371,-78.4905516589371,-78.5604882813307,-78.6300055651002,-78.6991059228661,-78.7677917552128,-78.8360654507137,-78.9039293859582,-78.9713859255783,-79.0384374222767,-79.1050862168549,-79.1713346382421,-79.2371850035248,-79.3026396179768,-79.36770077509,-79.4323707566049,-79.4966518325432,-79.5605462612391,-79.6240562893722,-79.6871841520011,-79.7499320725962,-79.812302263074,-79.8742969238319,-79.9359182437824,-79.997168400389,-80.0580495597013,-80.1185638763916,-80.1787134937907,-80.238500543925,-80.2979271475537,-80.356995414206,-80.4157074422187,-80.4740653187748,-80.5320711199414,-80.5897269107083,-80.6470347450273,-80.7039966658511,-80.7606147051727,-80.8168908840653,-80.872827212722,-80.9284256904962,-80.9836883059416,-81.038617036853,-81.0932138503073,-81.147480702704,-81.2014195398065,-81.2550322967835,-81.3083208982506,-81.3612872583115,-81.4139332806003,-81.4662608583229,-81.5182718742996,-81.5699682010068,-81.6213517006197,-81.6724242250544,-81.7231876160104,-81.7736437050136,-81.8237943134586,-81.8736412526517,-81.9231863238536,-81.9724313183224,-82.0213780173567,-82.0700281923386,-82.1183836047767,-82.1664460063494,-82.2142171389479,-82.2616987347197,-82.3088925161118,-82.3558001959136,-82.4024234773007,-82.4487640538783,-82.4948236097239,-82.540603819431,-82.5861063481528,-82.6313328516448,-82.6762849763088,-82.7209643592356,-82.7653726282489,-82.8095114019481,-82.8533822897518,-82.8969868919409,-82.9403267997017,-82.9834035951692,-83.0262188514705,-83.0687741327669,-83.111070994298,-83.1531109824239,-83.1948956346686,-83.2364264797624,-83.2777050376849,-83.3187328197078,-83.3595113284376,-83.4000420578576,-83.4403264933712,-83.4803661118437,-83.5201623816451,-83.559716762692,-83.59903070649,-83.6381056561756,-83.6769430465584,-83.7155443041629,-83.7539108472703,-83.7920440859603,-83.8299454221527,-83.8676162496486,-83.9050579541724,-83.9422719134127,-83.9792594970634,-84.0160220668651,-84.0525609766461,-84.0888775723628,-84.124973192141,-84.1608491663161,-84.1965068174741,-84.2319474604913,-84.2671724025751,-84.3021829433044,-84.3369803746687,-84.3715659811088,-84.4059410395563,-84.4401068194734,-84.4740645828921,-84.5078155844537,-84.5413610714484,-84.5747022838539,-84.6078404543747,-84.640776808481,-84.673512564447,-84.70604893339,-84.7383871193088,-84.7705283191212,-84.8024737227034,-84.834224512927,-84.8657818656975,-84.8971469499916,-84.9283209278953,-84.9593049546405,-84.9901001786437,-85.0207077415414};
	private static double coordinatecenter[] = {29.9792,31.1342};

	private static JTextField Lattitude = new JTextField(8);
	private static JTextField Longitude = new JTextField(8);

	private static JLabel topology = new JLabel("");
	private boolean init = true;
	private static int zoomLevel = 0;
	private static int minZoomLevel = -20;
	private static int maxZoomLevel = 10;
	private static double zoomMultiplicationFactor = 1.1;
	private static double unitsmultfactor = 1;
   private static boolean rebuffersatdataonstartup = false;

	private Point dragStartScreen;
	private Point dragEndScreen;
	private static AffineTransform coordTransform = new AffineTransform();

	public SATMAR() throws IOException {
		this.addMouseListener(new MouseAdapter() {
			@Override
			public void mousePressed(MouseEvent e) {
				dragStartScreen = e.getPoint();
				dragEndScreen = null;

				if (updatefields) {
					updatefields = false;
				}else {
					updatefields = true;
				}
			}
		});
		this.addMouseMotionListener(new MouseMotionAdapter() {
			@Override
			public void mouseDragged(MouseEvent e) {
				pan(e);
			}
			@Override
			public void mouseMoved(MouseEvent e) {
				updatecoordinates(e);
			}
		});
		this.addMouseWheelListener(new MouseWheelListener() {
			@Override
			public void mouseWheelMoved(MouseWheelEvent e) {
				zoom(e);
			}
		});

		this.addMouseListener( new MouseAdapter() {
			@Override
			public void mousePressed(MouseEvent e) {

				if (SwingUtilities.isRightMouseButton(e)){

					File filetosave = new File("ImageExport.jpg");
					JFileChooser fileChooser = new JFileChooser();
					fileChooser.setDialogTitle("SAVE IMAGE");
					fileChooser.setCurrentDirectory(filetosave);
					fileChooser.setSelectedFile(filetosave);

					int userSelection = fileChooser.showSaveDialog(frame);

					if (userSelection == JFileChooser.APPROVE_OPTION) {

						try {
							filetosave = fileChooser.getSelectedFile();
							ImageIO.write(img, "jpg" , filetosave);
						} catch (IOException e1) {
							// Dear front-end user: failed to save image
							e1.printStackTrace();
						}
					}
				}
			}
		}); 
	}

	@Override
	protected void paintComponent(Graphics g) {

		super.paintComponent(g);
		buffer = (Graphics2D) g;
		int x = 0;
		int y = 0;

		AffineTransform at = new AffineTransform();
		at.translate(x, y);
		at.scale(1, 1);
		if (init) {
			buffer.setTransform(at);
			init = false;
			coordTransform = buffer.getTransform();
		} else {
			buffer.scale(coordTransform.getScaleX(), coordTransform.getScaleY());
		}

		buffer.drawImage(img, (int) (coordTransform.getTranslateX()/coordTransform.getScaleX()), (int) (coordTransform.getTranslateY()/coordTransform.getScaleY()), this);
	}

	private void pan(MouseEvent e) {
		try {
			dragEndScreen = e.getPoint();
			Point2D.Float dragStart = transformPoint(dragStartScreen);
			Point2D.Float dragEnd = transformPoint(dragEndScreen);
			double dx = dragEnd.getX() - dragStart.getX();
			double dy = dragEnd.getY() - dragStart.getY();
			coordTransform.translate(dx, dy);
			dragStartScreen = dragEndScreen;
			dragEndScreen = null;
			repaint();
		} catch (NoninvertibleTransformException ex) {
			ex.printStackTrace();
		}
	}

	private void updatecoordinates(MouseEvent e) {

		if (updatefields)
		{
			//note single tile offset on longindex calculation
			int longindex = (int) (Math.floor(((e.getX()/coordTransform.getScaleX()) - (coordTransform.getTranslateX()/coordTransform.getScaleX()))/256) + leftindex + 1) ;
			double longmult = (((e.getX()/coordTransform.getScaleX()) - (coordTransform.getTranslateX()/coordTransform.getScaleX()))%256/256);
			
			//for tile wrap at Longitude +-180
			int longindexleft = longindex-1;
			if (longindex < 0) 
				longindex = 1024 + longindex;
			else if (longindex >1023)
				longindex = longindex - 1024;
			
			if (longindexleft < 0) {
				longindexleft = 1024 + longindexleft;
			}
			else if (longindexleft >1024)
				longindexleft = longindexleft - 1024;

			if (longindex == 0)
				longindex = 1024;//179.6 to -180 fixed
			else if (longindexleft == 1024)
				longindexleft = 0;
			
			
			int latindex = (int) (Math.floor(((e.getY()/coordTransform.getScaleY()) - (coordTransform.getTranslateY()/coordTransform.getScaleY()))/256)  + topindex ) ;
			double latmult = (1- ((e.getY()/coordTransform.getScaleY()) - (coordTransform.getTranslateY()/coordTransform.getScaleY()))%256/256);
			
			//process re-engineered, use pixel remainder to identify tile and crunch tile coordinates.  Earth Curvature and Trig showing significant error margins for large image buffers when compute from img border
			//Longitude.setText(String.valueOf(String.format("%.6f", (((((e.getX()/coordTransform.getScaleX()) - (coordTransform.getTranslateX()/coordTransform.getScaleX()))%256)/256) * (longitudematrix[ longindex  ]  - longitudematrix[ longindex -1]  )) + lattitudematrix[ latindex +  (int) Math.floor(((((e.getX()/coordTransform.getScaleX()) - (coordTransform.getTranslateX()/coordTransform.getScaleX()))/256))) ] )));//works at origin
			//Lattitude.setText(String.valueOf(String.format("%.6f", (((((e.getY()/coordTransform.getScaleY()) - (coordTransform.getTranslateY()/coordTransform.getScaleY()))%256)/256) * ( lattitudematrix[ latindex -1 ] -  lattitudematrix[ latindex ] )) + longitudematrix[ longindex + (int) Math.floor(((((e.getY()/coordTransform.getScaleY()) - (coordTransform.getTranslateY()/coordTransform.getScaleY()))/256))) ] )));

			try {

				Longitude.setText(String.valueOf(String.format("%.6f", ((longitudematrix[ longindex  ]  - longitudematrix[ longindexleft] ) * longmult) + longitudematrix[longindexleft]     )));
				Lattitude.setText(String.valueOf(String.format("%.6f", ((lattitudematrix[ latindex -1] -  lattitudematrix[ latindex    ] ) * latmult ) + lattitudematrix[latindex ]     )));

				int longgebcoindex = (int) (Math.round(((    ((longitudematrix[ longindex ]  - longitudematrix[ longindexleft] ) * longmult) + longitudematrix[longindex-1]    +180)/360)*86400 ))     ;
				int latgebcoindex  = (int) (Math.round((( 1 - (   ((lattitudematrix[ latindex -1 ] -  lattitudematrix[ latindex    ] ) * latmult ) + lattitudematrix[latindex ]    +90 )/180)*43200 )))    ;
				
				if (longgebcoindex < 0)
					longgebcoindex += 86400;
				else if (longgebcoindex > 86399)
					longgebcoindex -= 86400;
				
				
				//File Operation per EVERY mouseMoved event
				ObjectInputStream classinput = new ObjectInputStream(new FileInputStream("BINARY/GEBCO/" + latgebcoindex + ".bin"));
				GebcoShort GEBCO = (GebcoShort) classinput.readObject();
				classinput.close();

				TOPOButton.setText(String.format("%.0f", (double) (GEBCO.data[longgebcoindex]/unitsmultfactor)) + unitsstring);
				topology.setText( String.format("%.0f", (double) (GEBCO.data[longgebcoindex]/unitsmultfactor)) + unitsstring );  
				
            //will show binary array file and index needed
				//System.out.println(longgebcoindex);
				//System.out.println(latgebcoindex);
				
				
			} catch (Exception e1) {
				// math ain't perfect
				e1.printStackTrace();
			}
		}   
	}


	private void zoom(MouseWheelEvent e) {
		try {
			int wheelRotation = e.getWheelRotation();
			Point p = e.getPoint();
			if (wheelRotation > 0) {
				if (zoomLevel < maxZoomLevel) {
					zoomLevel++;
					Point2D p1 = transformPoint(p);
					coordTransform.scale(1 / zoomMultiplicationFactor, 1 / zoomMultiplicationFactor);
					Point2D p2 = transformPoint(p);
					coordTransform.translate(p2.getX() - p1.getX(), p2.getY() - p1.getY());
					repaint();
				}
			} else {
				if (zoomLevel > minZoomLevel) {
					zoomLevel--;
					Point2D p1 = transformPoint(p);
					coordTransform.scale(zoomMultiplicationFactor, zoomMultiplicationFactor);
					Point2D p2 = transformPoint(p);
					coordTransform.translate(p2.getX() - p1.getX(), p2.getY() - p1.getY());
					repaint();
				}
			}
		} catch (NoninvertibleTransformException ex) {
			ex.printStackTrace();
		}
	}

	private Point2D.Float transformPoint(Point p1) throws NoninvertibleTransformException {
		AffineTransform inverse = coordTransform.createInverse();
		Point2D.Float p2 = new Point2D.Float();
		inverse.transform(p1, p2);
		return p2;
	}

	public Dimension getPreferredSize() {
		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
		return new Dimension(screenSize.width, screenSize.height);
	}

   //Main Render Update (Go Button), tilegrid
   //See BinaryImageArray class for (serialization and) deserialization of image arrays
	private static void rebuffersatdata() {

		coordTransform = new AffineTransform();
		coordTransform.scale(1, 1);
		zoomLevel = 0;

		int i = 0;
		while (lattitudematrix[i] > coordinatecenter[0])
			i++;
		
		buffercoorboundary[0] = lattitudematrix[i-1];
		buffercoorboundary[1] = lattitudematrix[i];
		i = i - (int)Math.floor(tileheight/2);
		topindex = i;

		int j = 0;
		
		while (longitudematrix[j] < coordinatecenter[1])
			j++;
		
		buffercoorboundary[2] = longitudematrix[j-1];
		buffercoorboundary[3] = longitudematrix[j];
		j = j - (int)Math.floor(tilewidth/2);
		leftindex = j;

		img = new BufferedImage(tilewidth * 256, tileheight * 256, BufferedImage.TYPE_INT_RGB);

		Graphics big = img.getGraphics();
		BinaryImageArray Imagedata = null;
		
		int jadj = 0;
		
		for (int j2 = j ; j2 < j + tilewidth; j2++) {

			if (j2 < 0) 
				jadj = 1024 + j2;
			else if (j2 > 1023) 
				jadj = j2 - 1024;
			else jadj = j2;
			
			try {
				
				ObjectInputStream classinput = new ObjectInputStream(new FileInputStream("BINARY/" + datasetstring + "/" + String.valueOf(jadj) + ".bin" ));
				Imagedata = (BinaryImageArray) classinput.readObject();
				classinput.close();
			} catch (FileNotFoundException e1) {
				e1.printStackTrace();
			} catch (ClassNotFoundException e1) {
				e1.printStackTrace();
			} catch (IOException e1) {
				e1.printStackTrace();
			}
			ByteArrayInputStream input = new ByteArrayInputStream(Imagedata.imageData);
			ByteArrayInputStream binaryimage = null;

			try {
				for (int t = 0 ; t < i-1 ; t++) 
					input.readNBytes(Imagedata.filesizes[t]);
			} catch (IOException e) {
				e.printStackTrace();
			}

			for (int i1 = i ; i1 < i + tileheight; i1++) {

				try {

					binaryimage = new ByteArrayInputStream(input.readNBytes(Imagedata.filesizes[i1-1]));
					BufferedImage binaryinput = ImageIO.read(binaryimage);
					if (binaryinput != null) 
						big.drawImage(binaryinput, (j2-j)*256, (i1-i)*256, null);

				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
		
		big.setColor(Color.MAGENTA);
      
      //Draw Square at Coordinates
		int x = (int)Math.round(((coordinatecenter[1]-buffercoorboundary[2])  /  ((buffercoorboundary[3]-buffercoorboundary[2])))*256 -5);
		int y = (int)Math.round(((coordinatecenter[0]-buffercoorboundary[0])  /  ((buffercoorboundary[1]-buffercoorboundary[0])))*256 -5 );

		int newx = (int)(Math.floor(tilewidth/2)-1)*256 + x;
		int newy = (int) (Math.floor(tileheight/2))*256 + y;

		big.drawRect(newx , newy, 10 , 10);

		coordTransform.translate(- newx + frame.getBounds().getSize().width/coordTransform.getScaleX()/2, - newy + frame.getBounds().getSize().height/coordTransform.getScaleY()/2);

		frame.repaint();
      
	}     

   //config.txt file helper functions
	public static int getval(String[] data) {
		int value = 0;
		String out = "";
		for (int i = 1; i < data.length ; i++)
			out += data[i];
		value = Integer.valueOf(out);
		return value;
	}

	public static boolean isconfigkey(String word) {
		boolean yn = false;
		switch (word) {
		case "tileheight":
			yn = true;
		case "tilewidth":
			yn = true;
		case "minZoomLevel":
			yn = true;
		case "maxZoomLevel":
			yn = true;
		case "zoomMultiplicationFactor1.x":
			yn = true;
		case "topography_units":
			yn = true;
      case "latitude":
			yn = true;
		case "longitude":
			yn = true;
		case "rebuffersatdata":
			yn = true;
		}

		return yn;
	}

	public static void settopographyunits(int configinput) {
		//factor as a divisor, as a multiple imperial shows remainders
		switch(configinput) {
		case 0:
			unitsmultfactor = 1;          //GEBCO data default
			unitsstring = "   METERS";
			break;
		case 1:
			unitsmultfactor = 0.3048;
			unitsstring = "   FEET";
			break;
		case 2:
			unitsmultfactor = 0.9144;
			unitsstring = "   YARDS";
			break;
		case 3:
			unitsmultfactor = 1.8288;
			unitsstring = "   FATHOMS";
			break;
		default:
			break;
		}
	}

	public static void init() {

		BufferedReader reader;

		try {
			reader = new BufferedReader(new FileReader("CONFIG.txt"));
			String line = reader.readLine();
			while (line != null) {

				String data[] = line.split(" ");
				if (isconfigkey(data[0])){

					switch(data[0]) {
					case "tileheight":
						tileheight = getval(data);
						break;
					case "tilewidth":
						tilewidth = getval(data);
						break;
					case "topography_units":
						settopographyunits(getval(data));					
						break;
					case "minZoomLevel":
						minZoomLevel = getval(data);
						break;
					case "maxZoomLevel":
						maxZoomLevel = getval(data);
						break;
					case "zoomMultiplicationFactor1.x":
						zoomMultiplicationFactor = 1 + (double)getval(data)/10;
						break;
               case "latitude":
						Lattitude.setText(data[1]);
						break;
					case "longitude":
						Longitude.setText(data[1]);
						break;
					case "rebuffersatdata":
						rebuffersatdataonstartup = Boolean.parseBoolean(data[1]);
						break;
					}
				}

				line = reader.readLine();
			}
			reader.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}


	public static void main(String[] args) {
		try {

			init();

			SATMAR MAINVIEWER = new SATMAR();

			frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

			JPanel panel = new JPanel();

			JLabel lat = new JLabel("LATTITUDE");
			JLabel lon = new JLabel("LONGITUDE");
			JButton OKButton = new JButton("GO");
			
			OKButton.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
					try {
						coordinatecenter[0]=    Double.parseDouble(Lattitude.getText());
						coordinatecenter[1]=	Double.parseDouble(Longitude.getText());
					} catch (NumberFormatException e1) {
						e1.printStackTrace();
					}
					rebuffersatdata();
				}
			});

			String menu[] = {"GOOGLE Earth Satellite Imagery 2020","GOOGLE Earth Terrain with Roads 2022","MICROSOFT Satellite Imagery with labels 2022"};
			JComboBox<String> dataset = new JComboBox<String>(menu);
			dataset.setPreferredSize(new Dimension(300,25));
			ActionListener datasetaction = new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
					String s = (String) dataset.getSelectedItem();
					switch (s) {
					case "GOOGLE Earth Satellite Imagery 2020":
						datasetstring = "GOOGSAT";
						break;
					case "GOOGLE Earth Terrain with Roads 2022":
						datasetstring = "GOOGTERR";
						break;
					case "MICROSOFT Satellite Imagery with labels 2022":
						datasetstring = "BINGSAT";
						break;
					default:
						System.out.println(s);
						break;
					}
					rebuffersatdata();
				}
			};
			dataset.addActionListener(datasetaction);   

			TOPOButton.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {

					if(configinput < 3) 
						configinput++;
					else
						configinput = 0;

					settopographyunits(configinput);
					frame.repaint();
				}
			});
			TOPOButton.setSize(150, 50);

			JLabel attribution = new JLabel("GEBCO 2020 Grid (doi:10.5285/a29c5465-b138-234de053-6c86abc040b9)");
			attribution.setFont(new Font("Arial",Font.PLAIN,9));


			panel.add(topology);
			panel.add(dataset);
			panel.add(lat);
			panel.add(Lattitude);
			panel.add(lon);
			panel.add(Longitude);
			panel.add(OKButton);
			panel.add(attribution);
			panel.add(TOPOButton);

			panel.add(MAINVIEWER, BorderLayout.CENTER);
			panel.setVisible(true);
			
			
			ImageIcon img = new ImageIcon("win7_ico_shell32_dll-013.png");
			

			frame.setIconImage(img.getImage());
			frame.add(panel);
			frame.pack();
			frame.setVisible(true);

			coordinatecenter[0]= Double.parseDouble(Lattitude.getText());
			coordinatecenter[1]=	Double.parseDouble(Longitude.getText());
			
		} catch (IOException ex) {
			Logger.getLogger(SATMAR.class.getName()).log(Level.SEVERE, null, ex);
		}

		if (rebuffersatdataonstartup)
         rebuffersatdata();

	}
}
